1.2 存储程序计算机
##################

1.2.1 核心思想
==============

最早的存储程序计算机又称为“冯·诺依曼”结构计算机，这是著名数学家冯·诺依曼在1946年提出来的计算机模型，主要包括运算器、控制器、存储器和输入输出设备组成，参见图1-1。早期的存储程序计算机为现代计算机理论提供了逻辑框架，其核心思想包括以下三方面：

图1-1 存储程序计算机结构

.. image:: images/fig-1.1.png

1. 存储器是一维线性编址的存储单元数组。
    无论存储技术如何发展，至今所有处理器都采用八位存储单元编址方式，即一个字节为一个存储单元。
2. 数据和程序指令都以二进制编码的形式存放在存储器中。
    在运算器看来，存储器中存放的是二进制编码的数据。例如，整型数据的二进制编码格式包括无符号和有符号两种类型；浮点数据的二进制编码格式内部包含了符号、整数和尾数三部分。
    在控制器看来，存储器中存放的是二进制编码的程序指令。程序指令的二进制编码内部被分成操作码、条件码和若干操作数。
    如果一条指令的二进制编码长度为32位，那么两条相邻指令的地址就相差4。后面我们都假设每条指令的二进制编码长度固定为32位。
3. 基于程序计数器，控制器实现了指令序列的自动运行。
    控制器内部有一个程序计数器PC，记录了控制器取下一条指令所在的存储器单元的地址。
    当控制器上电时，程序计数器PC总有一个固定值，即PC指向固定地址。在这个固定地址的存储单元中存放了运算器上电运行的第一条指令。
    控制器根据PC值从存储器取出一条指令，PC一定会更新。要么PC自动递增4，即PC更新为下一条指令的地址；要么PC也可以被运算器直接修改，从而实现了指令跳转。

1.2.2 举个例子
==============

我们用一个汇编程序的例子来解释存储程序计算机的核心思想。在这个例子中，计算机上电时控制器的PC值为0x0000_0000，这个例子实现了根据地址0x0000_0004上32位数据内容是否为零来进行分支跳转。每条指令的二进制编码需要32位，即4字节，因此这个例子中的地址低两位全零。为了方便讨论，我们假设一条指令执行完成之后，控制器从存储单元中获取下一条指令。我们用一个汇编程序的例子来解释存储程序计算机的核心思想。在这个例子中，计算机上电时控制器的PC值为0x0000_0000，这个例子实现了根据地址0x0000_0004上32位数据内容是否为零来进行分支跳转。每条指令的二进制编码需要32位，即4字节，因此这个例子中的地址低两位全零。为了方便讨论，我们假设一条指令执行完成之后，控制器从存储单元中获取下一条指令。

============  ============  ============  ====
存储单元地址  存储单元内容  汇编代码      说明
============  ============  ============  ====
0x0000_0000   0x1400_0008   b 2f          无条件跳转指令
0x0000_0004   0x0000_0001   1: .word 0x1  32位无符号整型数据
0x0000_0008   0x18FF_FF80   2:ldr w0,1b   读取存储单元数据指令
0x0000_000C   0xXXXX_XXXX   cbnz w0,3fa   条件相对跳转指令
...           ...           ...           ...
0x0000_0020   0xXXXX_XXXX   3: XXXX       
============  ============  ============  ====

第一条指令的汇编语句为“b 2f”，地址为0x0000_0000。

1. 取指。
    上电时PC为0x0000_0000，控制器从存储器中取出第一条指令“b 2f”的二进制编码0x1400_0008。
2. 译码和运算。
    指令“b 2f”是无条件相对跳转指令，该指令的二进制编码有两部分：高6位的操作码和低26位的立即数。相对跳转指令是将PC值增加立即数，指令运行完成后PC值更新为0x0000_0008=0x0000_0000+0x0000_0008。

第二条指令“ldr w0, 1b”，地址为0x0000_0008。

1. 取指。
    PC值为0x0000_0008，控制器从存储器中取出指令“ldr w0, 1b”，该指令的二进制编码0x18FF_FF80。 
2. 译码和运算。
    指令“ldr w0, 1b”是整型访存读指令，该指令的二进制编码有三部分：高8位的操作码，低5位的通用32位寄存器索引值，和中间19位的立即数。该条整型访存读指令是从存储单元读取32位的数据并赋值给32位通用寄存器w0。存储单元地址为PC值加上符号扩展后的立即数，即0x0000_0004=0x0000_0008+0xFFFF_FFFC。寄存器w0的值为0x0000_0001。PC值自动递增0x4，即PC值更新为0x0000_000C。

第三条指令“cbnz w0, 2f”，地址为0x0000_000C。

1. 取指。
    PC值为0x0000_000C，控制器从存储器中取出指令“cbnz w0, 2f”，该指令的二进制编码0x3500_0280。
2. 译码和运算。
    指令“cbnz w0, 2f”为条件相对跳转指令，该指令的二进制编码有三部分：高8位的操作码，低5位的通用32位寄存器索引值，和中间19位的立即数。该条件相对跳转指令首先判断通用寄存器w0是否等于零，如果不等于零PC值就更新为0x0000_0020 = 0x0000_00C + 0x0000_0014；如果等于零，PC值就递增0x4，即PC值更新为0x0000_0010。因为通用寄存器w0值不为零，所以程序就跳转到0x0000_0020地址上运行了。

上述例子覆盖了存储程序计算机结构的核心思想。存储程序计算机结构虽然简单也存在诸多不足，但它奠定了现代计算机发展的基础。

1.2.3 哈佛结构
==============

1.2.4 多级存储结构
==================
